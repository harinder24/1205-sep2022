1. bool isNumber(char& ptr){
  if(isdigit(*ptr)){
    return true;
    }
    else{
    return false;}
}
2. bool isletter(char& ptr){
  if(isalpha(*ptr)){
    return true;
    }
    else{
    return false;}
}
3. exception handling occurs during euntime of code when an error occur, it could be a logical mistake or an hardware mis functionality.
  exceptions are handled by try and catch statement where try is a code that run if there is error it catches and exception is thrown.
  
4. 
namespace using std;
class user{
  private:
    int Id, PhoneNumber;
    string FirstName, LastName, EmailAddress, Address, PostalCode, Country;
  public:
    void getId (){
      return Id;
    }
    void getEmailAddress (){
      return EmailAddress;
    }
    void FirstName (){
      return FirstName;
    }
    void LastName (){
      return LastName;
    }
    User(int id,int phoneNumber, string firstName, string emailAddress, string address, string postalCode, string country){
      bool mybool = true;
    if(id == null || id.empty && phoneNumber == null || phoneNumber.empty && firstName == null || firstName.empty && lastName == null || lastName.empty && emailAddress == null || emailAddress.empty && address == null || address.empty && postalCode == null || postalCode.empty && country == null || country.empty )
      {
      mybool = false;
      throw invalid_argument("All field must not be empty or null");
      }
      else if(!emailAddress.contains("@") && !emailAddress.contains(".")){
      mybool = false;
        throw invalid_argument("email missing @ or .")
      }
      else if (emailAddress.contains("@") && emailAddress.contains(".")){
        int at = -1;
        for (int i = 0; i < emailAddress.length(); ++i){
              if(emailAddress[i] == "@"){
                at = i;
              }
              if (emailAddress[i] == "@" && i == 0){
              mybool = false;
                throw invalid_argument("missing username in email")
              }
              if(emailAddress[i] == "." && at == -1){
              mybool = false;
                throw invalid_argument("@ and . are in opposite order")
              if(emailAddress[i] == "." && (at+1) == i ){
              mybool = false;
                throw invalid_argument("missing domain name in email")
               }
              if(emailAddress[i] == "." && emailAddress.length() == i){
              mybool = false;
                throw invalid_argument("missing extention name in email")
              }
              }
          if(mybool == true){
          ID =id;
          PhoneNumber  = phoneNumber;
          FirstName = firstName;
          LastName = lastName;
          Emailaddress = emailAddress;
          Address = address;
          PostalCode = postalCode;
          Country = country;
          }
      }
      
    };

}

5. D
6.
using namespace std;
User u1;
u1(1234,123456789,"harinder","sran",hss022002@gmail.com,"Somewhere in canada","v3v v3v","canada")
void isEqual(const User& user){
  if(*user.getId == u1.getId){
      cout << "Same id";  
  }
  if(*user.getEmailaddress == u1.getEmailaddress){
      cout << "Same Emailaddress";  
  }
  if(*user.getFirstName == u1.getFirstName){
      cout << "Same FirstName";  
  }
  if(*user.getILastName == u1.getLastName){
      cout << "Same LastName";  
  }
}
7. inheritance is a concept of classes in c++ where child class inherit data and function from a parent class. for e.g car is a parent class and electric or gas is child class.
  
  using namespace std;
  class car{
    public: 
      Int numberOfTires = 4;
  }
  class electric : Public car{
    car c;
    public:
    string engineType = "electric";
    cout << "Car has " << numberOftires << " and it is " << engineType;
  }
  
  8. Virtual and Pure Virtual function are quite similar but Pure Virtual function have = 0 in end or creating a new abstract in another class whereas virtual function can be made in any class.
  for e.g.
  virtual - class idk{
      public:
        virtual void idkkk() { somecode};

  }
  pure virtual - 
  class idk{
      public:
        virtual void idkkk() =0;

  }
  
  9. class game {
    protected:
    int GameID;
    string Title;
    int Year;
    int Month;
    float Version;
    
    public:
      game(int gameID, string title, int year, int month, float version){
        GameID = gameID;
        Title = title;
        Year = year;
        Month = month;
        Version = version;   
      }
      IsCrossPlay();
   
  }
  class IsCrossplay{
    protected:
      bool OnlineGame;
    public:
      IsCrossplay = (int gameID, string title, int year, int month, float version, bool onlineGame) : game(gameId, title, year, month, version){
        OnlineGame = onlineGame;
      }
      Isfree();
  }
  class Isfree{
    protected:
    bool free;
    public:
      IsFree = (int gameID, string title, int year, int month, float version, bool onlineGame, bool free) : IsCrossplay(gameId, title, year, month, version, onlineGame){
        Free = free;
      }
  }
  
